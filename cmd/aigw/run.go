// Copyright Envoy AI Gateway Authors
// SPDX-License-Identifier: Apache-2.0
// The full text of the Apache license is available in the LICENSE file at
// the root of the repo.

package main

import (
	"bytes"
	"context"
	_ "embed"
	"fmt"
	"io"
	"log/slog"
	"net"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	"github.com/a8m/envsubst"
	egv1a1 "github.com/envoyproxy/gateway/api/v1alpha1"
	"github.com/envoyproxy/gateway/cmd/envoy-gateway/root"
	egextension "github.com/envoyproxy/gateway/proto/extension"
	"google.golang.org/grpc"
	"google.golang.org/grpc/health/grpc_health_v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes/fake"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	gwapiv1 "sigs.k8s.io/gateway-api/apis/v1"
	"sigs.k8s.io/yaml"

	"github.com/envoyproxy/ai-gateway/internal/controller"
	"github.com/envoyproxy/ai-gateway/internal/extensionserver"
	"github.com/envoyproxy/ai-gateway/internal/filterapi"
)

var (
	// This is the default configuration for the AI Gateway when <path> parameter is not given.
	//
	//go:embed ai-gateway-default-resources.yaml
	aiGatewayDefaultResources string

	// This is the template for the Envoy Gateway configuration where PLACEHOLDER_TMPDIR will be replaced with the temporary
	// directory where the resources are written to.
	//
	//go:embed envoy-gateway-config.yaml
	envoyGatewayConfigTemplate string
)

const (
	substitutionEnvAnnotationPrefix  = "substitution.aigw.run/env/"
	substitutionFileAnnotationPrefix = "substitution.aigw.run/file/"
)

// errExtProcRun is returned when the external processor fails to run.
var errExtProcRun = fmt.Errorf("external processor run error")

type runCmdContext struct {
	// isDebug true if the original `agw run` command is run with debug mode. Using this to
	// set the log level of the external process currently. TODO: maybe simply expose the external process log level
	// at the command line, but that's an implementation detail, so I would rather not right now.
	isDebug bool
	// envoyGatewayResourcesOut is the output file for the envoy gateway resources.
	envoyGatewayResourcesOut io.Writer
	// stderrLogger is the logger for stderr.
	stderrLogger *slog.Logger
	// tmpdir is the temporary directory for the resources.
	tmpdir string
	// udsPath is the path to the UDS socket used by the AI Gateway extproc.
	udsPath string
	// extProcLauncher is the function used to launch the external processor.
	extProcLauncher func(ctx context.Context, args []string, w io.Writer) error
	// fakeClientSet is the fake client set for the k8s resources. The objects are written to this client set and updated
	// during the translation.
	fakeClientSet *fake.Clientset
}

// runOpts are the options for the run command.
type runOpts struct {
	// extProcLauncher is the function used to launch the external processor.
	extProcLauncher func(ctx context.Context, args []string, w io.Writer) error
}

// run starts the AI Gateway locally for a given configuration.
//
// This will create a temporary directory and a file:
//  1. ${os.TempDir}/envoy-gateway-config.yaml: This contains the configuration for the Envoy Gateway agent to run, derived from envoyGatewayConfig.
//  2. ${os.TempDir}/envoy-ai-gateway-resources: This will contain the EG resource generated by the translation and deployed by EG.
func run(ctx context.Context, c cmdRun, o runOpts, stdout, stderr io.Writer) error {
	if !c.Debug {
		stderr = io.Discard
	}
	stderrLogger := slog.New(slog.NewTextHandler(stderr, &slog.HandlerOptions{}))
	if c.ShowDefault {
		_, err := stdout.Write([]byte(aiGatewayDefaultResources))
		if err != nil {
			panic(fmt.Sprintf("BUG: failed to write default resources: %v", err))
		}
		return nil
	}

	// First, we need to create the self-signed certificates used for communication between the EG and Envoy.
	// Certificates will be placed at /tmp/envoy-gateway/certs, which is currently is not configurable:
	// https://github.com/envoyproxy/gateway/blob/779c0a6bbdf7dacbf25a730140a112f99c239f0e/internal/infrastructure/host/infra.go#L22-L23
	//
	// TODO: maybe make it skip if the certs are already there, but not sure if it's worth the complexity.
	certGenOut := &bytes.Buffer{}
	certGen := root.GetRootCommand()
	certGen.SetOut(certGenOut)
	certGen.SetErr(certGenOut)
	certGen.SetArgs([]string{"certgen", "--local"})
	if err := certGen.ExecuteContext(ctx); err != nil {
		return fmt.Errorf("failed to execute certgen: %w: %s", err, certGenOut.String())
	}

	tmpdir := filepath.Join(os.TempDir(), "aigw-run")
	if err := recreateDir(tmpdir); err != nil {
		return fmt.Errorf("failed to create temporary directory %s: %w", tmpdir, err)
	}
	egConfigPath := filepath.Join(tmpdir, "envoy-gateway-config.yaml")      // 1. The path to the Envoy Gateway config.
	resourcesTmpdir := filepath.Join(tmpdir, "/envoy-ai-gateway-resources") // 2. The path to the resources.
	if err := recreateDir(resourcesTmpdir); err != nil {
		return err
	}

	// Write the Envoy Gateway config which points to the resourcesTmpdir to tell Envoy Gateway where to find the resources.
	stderrLogger.Info("Writing Envoy Gateway config", "path", egConfigPath)
	err := os.WriteFile(egConfigPath, []byte(strings.ReplaceAll(
		envoyGatewayConfigTemplate, "PLACEHOLDER_TMPDIR", resourcesTmpdir),
	), 0o600)
	if err != nil {
		return fmt.Errorf("failed to write file %s: %w", egConfigPath, err)
	}

	// Write the Envoy Gateway resources into a file under resourcesTmpdir.
	resourceYamlPath := filepath.Join(resourcesTmpdir, "config.yaml")
	stderrLogger.Info("Creating Envoy Gateway resource file", "path", resourceYamlPath)
	udsPath := filepath.Join(tmpdir, "uds.sock")
	_ = os.Remove(udsPath)

	// Do the translation of the given AI Gateway resources Yaml into Envoy Gateway resources and write them to the file.
	resourcesBuf := &bytes.Buffer{}
	runCtx := &runCmdContext{
		envoyGatewayResourcesOut: resourcesBuf,
		stderrLogger:             stderrLogger,
		udsPath:                  udsPath,
		extProcLauncher:          o.extProcLauncher,
		tmpdir:                   tmpdir,
		isDebug:                  c.Debug,
	}
	aiGatewayResourcesYaml, err := readConfig(c.Path)
	if err != nil {
		return err
	}
	fakeClient, extProxDone, envoyAdminAddr, err := runCtx.writeEnvoyResourcesAndRunExtProc(ctx, aiGatewayResourcesYaml)
	if err != nil {
		return fmt.Errorf("failed to write envoy resources and run extproc: %w", err)
	}
	err = os.WriteFile(resourceYamlPath, resourcesBuf.Bytes(), 0o600)
	if err != nil {
		return fmt.Errorf("failed to write file %s: %w", resourceYamlPath, err)
	}

	lis, err := net.Listen("tcp", "localhost:1061")
	if err != nil {
		return fmt.Errorf("failed to listen: %w", err)
	}
	s := grpc.NewServer()
	extSrv := extensionserver.New(fakeClient, ctrl.Log, udsPath, true)
	egextension.RegisterEnvoyGatewayExtensionServer(s, extSrv)
	grpc_health_v1.RegisterHealthServer(s, extSrv)

	serverCtx, serverCancel := context.WithCancel(ctx)

	var extProcErr error
	go func() {
		select {
		case <-ctx.Done():
		case extProcErr = <-extProxDone:
		}
		s.GracefulStop()
		serverCancel()
	}()
	go func() {
		if err := s.Serve(lis); err != nil {
			stderrLogger.Error("Failed to run extension server", "error", err)
		}
	}()

	// At this point, we have two things prepared:
	//  1. The Envoy Gateway config in egConfigPath.
	//  2. The Envoy Gateway resources in resourceYamlPath pointed by the config at egConfigPath.
	//
	// Now running the `envoy-gateway` CLI alternative below by passing `--config-path` to `egConfigPath`.
	// Then the agent will read the resources from the file pointed inside the config and start the Envoy process.

	server := root.GetRootCommand()
	// TODO: enable the log by default after the issue is resolved: https://github.com/envoyproxy/gateway/issues/6596
	if c.Debug {
		server.SetOut(stdout)
		server.SetErr(stderr)
	} else {
		server.SetOut(io.Discard)
		server.SetErr(io.Discard)
	}
	server.SetArgs([]string{"server", "--config-path", egConfigPath})
	go pollEnvoyReadiness(ctx, stderrLogger, envoyAdminAddr, 2*time.Second) // Start the goroutine to inform about the readiness of Envoy.
	if err := server.ExecuteContext(serverCtx); err != nil {
		return fmt.Errorf("failed to execute server: %w", err)
	}

	return extProcErr
}

// pollEnvoyReadiness polls the Envoy readiness endpoint on the given address until it is ready or the context is done.
func pollEnvoyReadiness(ctx context.Context, l *slog.Logger, addr string, interval time.Duration) {
	if addr == "" {
		return
	}

	t := time.NewTicker(interval)
	defer t.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-t.C:
			status := "UNAVAILABLE"
			resp, _ := http.Get(fmt.Sprintf("http://%s/ready", addr))
			if resp != nil && resp.Body != nil {
				if st, err := io.ReadAll(resp.Body); err == nil {
					status = strings.TrimSpace(string(st))
				}
				_ = resp.Body.Close()
				if resp.StatusCode == 200 {
					l.Info("Envoy is ready!", "status", status)
					return
				}
			}
			l.Info("Waiting for Envoy to be ready...", "status", status)
		}
	}
}

// readConfig returns config from the given path, substituting ENV variables
// similar to `envsubst`. If the path is empty the default config is returned.
func readConfig(path string) (string, error) {
	if path == "" {
		return aiGatewayDefaultResources, nil
	}
	var yamlBytes []byte
	yamlBytes, err := envsubst.ReadFile(path)
	if err != nil {
		return "", fmt.Errorf("error reading config: %w", err)
	}
	return string(yamlBytes), nil
}

// recreateDir removes the directory at the given path and creates a new one.
func recreateDir(path string) error {
	err := os.RemoveAll(path)
	if err != nil {
		return fmt.Errorf("failed to remove directory %s: %w", path, err)
	}
	err = os.MkdirAll(path, 0o755)
	if err != nil {
		return fmt.Errorf("failed to create directory %s: %w", path, err)
	}
	return nil
}

// writeEnvoyResourcesAndRunExtProc reads all resources from the given string, writes them to the output file, and runs
// external processes for EnvoyExtensionPolicy resources.
func (runCtx *runCmdContext) writeEnvoyResourcesAndRunExtProc(ctx context.Context, original string) (client.Client, <-chan error, string, error) {
	aigwRoutes, aigwBackends, backendSecurityPolicies, gateways, secrets, envoyProxies, err := collectObjects(original, runCtx.envoyGatewayResourcesOut, runCtx.stderrLogger)
	if err != nil {
		return nil, nil, "", fmt.Errorf("error collecting: %w", err)
	}
	if len(gateways) > 1 {
		return nil, nil, "", fmt.Errorf("multiple gateways are not supported: %s", gateways[0].Name)
	}
	for _, bsp := range backendSecurityPolicies {
		spec := bsp.Spec
		if spec.AWSCredentials != nil && spec.AWSCredentials.OIDCExchangeToken != nil {
			// TODO: We can make it work by generalizing the rotation logic.
			return nil, nil, "", fmt.Errorf("OIDC exchange token is not supported: %s", bsp.Name)
		}
	}

	// Do the substitution for the secrets.
	for _, s := range secrets {
		if err = runCtx.rewriteSecretWithAnnotatedLocation(s); err != nil {
			return nil, nil, "", fmt.Errorf("failed to rewrite secret %s: %w", s.Name, err)
		}
	}

	fakeClient, _fakeClientSet, httpRoutes, eps, httpRouteFilter, backends, _, err := translateCustomResourceObjects(ctx, aigwRoutes, aigwBackends, backendSecurityPolicies, gateways, secrets, runCtx.stderrLogger)
	if err != nil {
		return nil, nil, "", fmt.Errorf("error translating: %w", err)
	}
	runCtx.fakeClientSet = _fakeClientSet

	for _, hrf := range httpRouteFilter.Items {
		runCtx.mustClearSetOwnerReferencesAndStatusAndWriteObj(&hrf.TypeMeta, &hrf)
	}
	for _, hr := range httpRoutes.Items {
		runCtx.mustClearSetOwnerReferencesAndStatusAndWriteObj(&hr.TypeMeta, &hr)
	}
	for _, b := range backends.Items {
		runCtx.mustClearSetOwnerReferencesAndStatusAndWriteObj(&b.TypeMeta, &b)
	}
	gw := gateways[0]
	runCtx.mustClearSetOwnerReferencesAndStatusAndWriteObj(&gw.TypeMeta, gw)
	for _, ep := range eps.Items {
		runCtx.mustClearSetOwnerReferencesAndStatusAndWriteObj(&ep.TypeMeta, &ep)
	}

	filterConfigSecret, err := runCtx.fakeClientSet.CoreV1().
		Secrets("").Get(ctx,
		controller.FilterConfigSecretPerGatewayName(gw.Name, gw.Namespace), metav1.GetOptions{})
	if err != nil {
		return nil, nil, "", fmt.Errorf("failed to get filter config secret: %w", err)
	}

	rawConfig, ok := filterConfigSecret.StringData[controller.FilterConfigKeyInSecret]
	if !ok {
		return nil, nil, "", fmt.Errorf("failed to get filter config from secret: %w", err)
	}
	var fc filterapi.Config
	if err = yaml.Unmarshal([]byte(rawConfig), &fc); err != nil {
		return nil, nil, "", fmt.Errorf("failed to unmarshal filter config: %w", err)
	}
	runCtx.stderrLogger.Info("Running external process", "config", fc)
	done := runCtx.mustStartExtProc(ctx, &fc)
	return fakeClient, done, runCtx.tryFindEnvoyAdminAddress(gw, envoyProxies), nil
}

// mustStartExtProc starts the external process with the given working directory, port, and filter configuration.
func (runCtx *runCmdContext) mustStartExtProc(
	ctx context.Context,
	filterCfg *filterapi.Config,
) <-chan error {
	marshaled, err := yaml.Marshal(filterCfg)
	if err != nil {
		panic(fmt.Sprintf("BUG: failed to marshal filter config: %v", err))
	}
	configPath := filepath.Join(runCtx.tmpdir, "extproc-config.yaml")
	_ = os.Remove(configPath)
	err = os.WriteFile(configPath, marshaled, 0o600)
	if err != nil {
		panic(fmt.Sprintf("BUG: failed to write extension proc config: %v", err))
	}
	args := []string{
		"--configPath", configPath,
		"--extProcAddr", fmt.Sprintf("unix://%s", runCtx.udsPath),
	}
	if runCtx.isDebug {
		args = append(args, "--logLevel", "debug")
	} else {
		args = append(args, "--logLevel", "warn")
	}

	done := make(chan error)
	go func() {
		if err := runCtx.extProcLauncher(ctx, args, os.Stderr); err != nil {
			runCtx.stderrLogger.Error("Failed to run external processor", "error", err)
			done <- fmt.Errorf("%w: %w", errExtProcRun, err)
		}
		close(done)
	}()
	return done
}

// mustClearSetOwnerReferencesAndStatusAndWriteObj clears the owner references and status of the given object, marshals it
// to YAML, and writes it to the output file.
//
// The resources must not have these fields set to be run by the Envoy Gateway agent.
//
// All operation here are done in a panic if an error occurs since the error should not happen in practice.
func (runCtx *runCmdContext) mustClearSetOwnerReferencesAndStatusAndWriteObj(typedMeta *metav1.TypeMeta, obj client.Object) {
	obj.SetOwnerReferences(nil)
	mustSetGroupVersionKind(typedMeta, obj)
	marshaled, err := yaml.Marshal(obj)
	if err != nil {
		panic(err)
	}
	var raw map[string]any
	err = yaml.Unmarshal(marshaled, &raw)
	if err != nil {
		panic(err)
	}
	delete(raw, "status")
	marshaled, err = yaml.Marshal(raw)
	if err != nil {
		panic(err)
	}
	_, err = runCtx.envoyGatewayResourcesOut.Write(append([]byte("---\n"), marshaled...))
	if err != nil {
		panic(err)
	}
}

func (runCtx *runCmdContext) rewriteSecretWithAnnotatedLocation(s *corev1.Secret) (err error) {
	allData := s.Data
	if allData == nil {
		allData = make(map[string][]byte)
	}
	for k, v := range s.StringData {
		allData[k] = []byte(v)
	}
	for k, v := range allData {
		envSubKeyAnnotation := substitutionEnvAnnotationPrefix + k
		fileSubKeyAnnotation := substitutionFileAnnotationPrefix + k
		if envSubKey, ok := s.Annotations[envSubKeyAnnotation]; ok {
			// If this is an environment variable, substitute it.
			envVal := os.Getenv(envSubKey)
			if envVal == "" {
				runCtx.stderrLogger.Warn("Missing environment variable, skipping substitution",
					"annotation_key", envSubKey, "env_key", k, "env_substitution_key", envSubKey)
				continue
			}
			runCtx.stderrLogger.Info("Substituting environment variable", "key", k, "value", envSubKey)
			v = []byte(envVal)
		} else if fileSubKey, ok := s.Annotations[fileSubKeyAnnotation]; ok {
			fileSubPath := maybeResolveHome(fileSubKey)
			// Check the target file exists.
			v, err = os.ReadFile(fileSubPath)
			if err != nil {
				runCtx.stderrLogger.Error("Failed to read substitution file. Skipping substitution", "path", fileSubPath, "error", err)
				continue
			}
			runCtx.stderrLogger.Info("Substituting file", "key", k, "value", fileSubKey)
		}
		allData[k] = v
	}
	s.Data = allData
	s.StringData = nil
	return nil
}

// tryFindEnvoyAdminAddress tries to find the address where the Envoy Admin interface is listening to.
// By default, Envoy Gateway assigns a random port to the Envoy Admin interface, and we may not be able to find it. This method
// attempts to find an EnvoyProxy instance attached to the standalone Gateway, and reads the bootstrap config to check if there
// is a custom address configured for the admin interface.
// If there is no EnvoyProxy or the admin address is not configured, this returns an empty string.
func (runCtx *runCmdContext) tryFindEnvoyAdminAddress(gw *gwapiv1.Gateway, proxies []*egv1a1.EnvoyProxy) string {
	if gw.Spec.Infrastructure == nil ||
		gw.Spec.Infrastructure.ParametersRef == nil ||
		gw.Spec.Infrastructure.ParametersRef.Kind != "EnvoyProxy" ||
		gw.Spec.Infrastructure.ParametersRef.Name == "" {
		return ""
	}

	var bootstrap *egv1a1.ProxyBootstrap
	for _, p := range proxies {
		if p.Name == gw.Spec.Infrastructure.ParametersRef.Name {
			bootstrap = p.Spec.Bootstrap
			break
		}
	}

	if bootstrap == nil || bootstrap.Value == nil {
		return ""
	}

	type adminSettings struct {
		Admin struct {
			Address struct {
				SocketAddress struct {
					Address   string `json:"address"`
					PortValue int    `json:"port_value"`
				} `json:"socket_address,omitempty"`
			} `json:"address"`
		} `json:"admin"`
	}

	var admin adminSettings
	if err := yaml.Unmarshal([]byte(*bootstrap.Value), &admin); err != nil {
		runCtx.stderrLogger.Error("Failed to read EnvoyProxy bootstrap settings", "error", err)
		return ""
	}

	if admin.Admin.Address.SocketAddress.Address == "" || admin.Admin.Address.SocketAddress.PortValue == 0 {
		return ""
	}
	return fmt.Sprintf("%s:%d", admin.Admin.Address.SocketAddress.Address, admin.Admin.Address.SocketAddress.PortValue)
}

func maybeResolveHome(p string) string {
	if strings.HasPrefix(p, "~/") {
		home, err := os.UserHomeDir()
		if err != nil {
			return p
		}
		return filepath.Join(home, p[2:])
	}
	return p
}
